# Configure the AWS Provider
provider "aws" {
  region = "us-east-2"
}
# Create a VPC
resource "aws_vpc" "TF_VPC" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "TF_VPC"
  }
}
# Create a Public Subnet1
resource "aws_subnet" "PublicSubnet1" {
  vpc_id     = aws_vpc.TF_VPC.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-2a"
  map_public_ip_on_launch = true

  tags = {
    Name = "TF-PublicSubnet1"
  }
}
# Create a Public Subnet2
resource "aws_subnet" "PublicSubnet2" {
  vpc_id     = aws_vpc.TF_VPC.id
  cidr_block = "10.0.2.0/24"
  availability_zone = "us-east-2b"
  map_public_ip_on_launch = true

  tags = {
    Name = "TF-PublicSubnet2"
  }
}
# Create a Private Subnet1
resource "aws_subnet" "PrivateSubnet1" {
  vpc_id     = aws_vpc.TF_VPC.id
  cidr_block = "10.0.3.0/24"
  availability_zone = "us-east-2a"
  map_public_ip_on_launch = false

  tags = {
    Name = "TF-PrivateSubnet1"
  }
}
# Create a Private Subnet2
resource "aws_subnet" "PrivateSubnet2" {
  vpc_id     = aws_vpc.TF_VPC.id
  cidr_block = "10.0.4.0/24"
  availability_zone = "us-east-2b"
  map_public_ip_on_launch = false

  tags = {
    Name = "TF-PrivateSubnet2"
  }
}

#Create a Internet Gateway
resource "aws_internet_gateway" "InternetGateway" {
  vpc_id = aws_vpc.TF_VPC.id

  tags = {
    Name = "TF-InternetGateway"
  }
}
#Create a Public Route Table
resource "aws_route_table" "PublicRouteTable" {
  vpc_id = aws_vpc.TF_VPC.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.InternetGateway.id
  }
  tags = {
    Name = "TF-Public-RT"
  }
}
#Create a PublicSubnet1 association Route Table
resource "aws_route_table_association" "PublicSubnet1Association" {
  subnet_id      = aws_subnet.PublicSubnet1.id
  route_table_id = aws_route_table.PublicRouteTable.id
}
#Create a PublicSubnet2 association Route Table
resource "aws_route_table_association" "PublicSubnet2Association" {
  subnet_id      = aws_subnet.PublicSubnet2.id
  route_table_id = aws_route_table.PublicRouteTable.id
}
#Create a EIP for NAT-Gateway
resource "aws_eip" "NatIP" {
  depends_on = [aws_internet_gateway.InternetGateway]
}
#Create NAT-Gateway
resource "aws_nat_gateway" "NAT-Gateway" {
  allocation_id = aws_eip.NatIP.id
  subnet_id     = aws_subnet.PublicSubnet1.id

  tags = {
    Name = "TF-gw-NAT"
  }
}
#Create a Private Route Table
resource "aws_route_table" "PrivateRouteTable" {
  vpc_id = aws_vpc.TF_VPC.id

  route {
    cidr_block = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.NAT-Gateway.id
  }
  tags = {
    Name = "TF-Private-RT"
  }
}
#Create a PrivateSubnet1 association Route Table
resource "aws_route_table_association" "PrivateSubnet1Association" {
  subnet_id      = aws_subnet.PrivateSubnet1.id
  route_table_id = aws_route_table.PrivateRouteTable.id
}
#Create a PrivateSubnet2 association Route Table
resource "aws_route_table_association" "PrivateSubnet2Association" {
  subnet_id      = aws_subnet.PrivateSubnet2.id
  route_table_id = aws_route_table.PrivateRouteTable.id
}

#Create a Backend Security Group
resource "aws_security_group" "BackendSecurityGroup" {
  name        = "BackendSecurityGroup"
  description = "Allow 8000,3306,80,22 port inbound traffic"
  vpc_id      = aws_vpc.TF_VPC.id

  ingress {
    description      = "Listen on 8000,3306,80,22 port"
    from_port        = 3306
    to_port          = 3306
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  ingress {
    description      = "Listen on 8000,3306,80,22 port"
    from_port        = 8000
    to_port          = 8000
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  ingress {
    description      = "Listen on 8000,3306,80,22 port"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  ingress {
    description      = "Listen on 8000,3306,80,22 port"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
  tags = {
    Name = "TF-Backend_SG"
  }
}

#Create a Frontend Security Group
resource "aws_security_group" "FrontendSecurityGroup" {
  name        = "FrontendSecurityGroup"
  description = "Allow 80,22 port inbound traffic"
  vpc_id      = aws_vpc.TF_VPC.id

  ingress {
    description      = "Listen on 80,22 port"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  ingress {
    description      = "Listen on 80,22 port"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "TF-Frontend_SG"
  }
}

#Create a DB Subnet Group
resource "aws_db_subnet_group" "db-subnet-group" {
  name       = "db-subnet-group"
  subnet_ids = [aws_subnet.PrivateSubnet1.id, aws_subnet.PrivateSubnet2.id]

  tags = {
    Name = "TF-db-subnet-group"
  }
}
#Create a RDS Instance
resource "aws_db_instance" "RushiDatabase" {
  allocated_storage    = 10
  engine               = "mysql"
  engine_version       = "5.7"
  instance_class       = "db.t2.micro"
  name                 = "chatapp_database"
  username             = "admin"
  password             = "Rushikesh"
  db_subnet_group_name = aws_db_subnet_group.db-subnet-group.id
  vpc_security_group_ids = [aws_security_group.BackendSecurityGroup.id]
  skip_final_snapshot  = true
}

#Create a Frontend server
resource "aws_instance" "FrontendInstance" {
     ami = "ami-008667b7f2d94eda3"
     instance_type = "t2.micro"
     key_name = "linux-key"
     subnet_id = aws_subnet.PublicSubnet1.id
     vpc_security_group_ids = [aws_security_group.FrontendSecurityGroup.id]
     associate_public_ip_address = true
     tags = {
       Name = "TF-Static-Frontend"
  }
}

#Create a Backend Server
resource "aws_instance" "BackendInstance" {
     ami = "ami-01a780216b33ecb35"
     instance_type = "t2.micro"
     key_name = "linux-key"
     subnet_id = aws_subnet.PrivateSubnet1.id
     vpc_security_group_ids = [aws_security_group.BackendSecurityGroup.id]
     associate_public_ip_address = false
     tags = {
       Name = "TF-Static-Backend"
  }
}

#Create a Backend Launch Configurations
resource "aws_launch_configuration" "TFBackendLaunchConfigurations" {
  name          = "TF-Backend-LaunchConfiguration"
  image_id      = "ami-01a780216b33ecb35"
  instance_type = "t2.micro"
  security_groups = [aws_security_group.BackendSecurityGroup.id]
}

#Create a Backend Target Group
resource "aws_lb_target_group" "TFBackendTargetGroup" {
  name     = "TF-Backend-TargetGroup"
  port     = 8000
  protocol = "HTTP"
  vpc_id   = aws_vpc.TF_VPC.id
}

#Create a Backend Load Balancer
resource "aws_lb" "BackendLoadbalancer" {
  name               = "TF-Backend-LB"
  internal           =  true
  load_balancer_type = "application"
  security_groups    = [aws_security_group.BackendSecurityGroup.id]
  subnets            = [aws_subnet.PrivateSubnet1.id, aws_subnet.PrivateSubnet2.id]
  tags = {
       Name = "TF-Backend-LB"
  }

}

#Create a Listner for Backend Load balancer
resource "aws_lb_listener" "Backend-Listner-LB" {
  load_balancer_arn = aws_lb.BackendLoadbalancer.arn
  port              = "80"
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.TFBackendTargetGroup.arn
  }
}

#Create a Backend Auto Scaling Group
resource "aws_autoscaling_group" "TF-Backend-ASG" {
  name                      = "TF-Backend-ASG"
  max_size                  = 3
  min_size                  = 1
  health_check_grace_period = 300
  health_check_type         = "ELB"
  desired_capacity          = 1
  launch_configuration      = aws_launch_configuration.TFBackendLaunchConfigurations.id
  vpc_zone_identifier       = [aws_subnet.PrivateSubnet1.id, aws_subnet.PrivateSubnet2.id]
  target_group_arns         = [aws_lb_target_group.TFBackendTargetGroup.id]
  tag {
    key                 = "Name"
    value               = "TF-ASG-Backend"
    propagate_at_launch = true
  }
  
}

#Create a Backend Target Policy for Auto Scaling
resource "aws_autoscaling_policy" "Backend-TargetPolicy" {
name = "Backend-TargetPolicy"
policy_type = "TargetTrackingScaling"
autoscaling_group_name = aws_autoscaling_group.TF-Backend-ASG.id
estimated_instance_warmup = 200

target_tracking_configuration {
predefined_metric_specification {
predefined_metric_type = "ASGAverageCPUUtilization"
}

    target_value = "60"
}
}
#Create a launch_configuration For Frontend
resource "aws_launch_configuration" "TF-Frontend-LaunchConfigurations" {
  name          = "TF-Frontend-LaunchConfiguration"
  image_id      = "ami-0ca9d6d534302ef0e"
  instance_type = "t2.micro"
  security_groups = [aws_security_group.FrontendSecurityGroup.id]
}

#Create a Frontend TargetGroup
resource "aws_lb_target_group" "TFFrontendTargetGroup" {
  name     = "TF-Frontend-TargetGroup"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.TF_VPC.id
}

#Create a Frontend Loadbalancer
resource "aws_lb" "FrontendLoadbalancer" {
  name               = "TF-Frontend-LB"
  internal           =  false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.FrontendSecurityGroup.id]
  subnets            = [aws_subnet.PublicSubnet1.id, aws_subnet.PublicSubnet2.id]
  tags = {
       Name = "TF-Frontend-LB"
  }

}

#Create a Listner for Frontend Load balancer
resource "aws_lb_listener" "Frontend-Listner-LB" {
  load_balancer_arn = aws_lb.FrontendLoadbalancer.arn
  port              = "80"
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.TFFrontendTargetGroup.arn
  }
}

#Create a Frontend aws_autoscaling_group 
resource "aws_autoscaling_group" "TF-Frontend-ASG" {
  name                      = "TF-Frontend-ASG"
  max_size                  = 3
  min_size                  = 1
  health_check_grace_period = 300
  desired_capacity          = 1
  launch_configuration      = aws_launch_configuration.TF-Frontend-LaunchConfigurations.id
  vpc_zone_identifier       = [aws_subnet.PublicSubnet1.id, aws_subnet.PublicSubnet2.id]
  target_group_arns         = [aws_lb_target_group.TFFrontendTargetGroup.id]
  tag {
    key                 = "Name"
    value               = "TF-ASG-Frontend"
    propagate_at_launch = true
  }
  
}

#Create a Frontend-TargetPolicy 
resource "aws_autoscaling_policy" "Frontend-TargetPolicy" {
name = "Frontend-TargetPolicy"
policy_type = "TargetTrackingScaling"
autoscaling_group_name = aws_autoscaling_group.TF-Frontend-ASG.id
estimated_instance_warmup = 200

target_tracking_configuration {
predefined_metric_specification {
predefined_metric_type = "ASGAverageCPUUtilization"
}

    target_value = "60"
}
}




